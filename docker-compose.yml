version: '3.9'
services:
  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: rabbitsa
      RABBITMQ_DEFAULT_PASS: mypa55w0rd!
    ports:
      - "5672:5672"
      - "15672:15672"
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - "1414:1433"
    volumes:
      - ~/apps/mssql/data:/var/lib/mssqlql/data
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: superPuperPassword!15641
  web:
    image: back
    depends_on:
      - mssql
      - rabbitmq
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - "4040:80"
    environment:
      MessageBroker__Username: rabbitsa
      MessageBroker__Password: mypa55w0rd!
      MessageBroker__Hostname: rabbitmq
      MessageBroker__Port: 5672
      ConnectionStrings__BeaverTinderDatabase: Data Source=mssql;Initial Catalog=BeaverTinderDatabase;User=sa;Password=superPuperPassword!15641;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False;MultipleActiveResultSets=true;
    volumes:
      - ~/.aspnet/https:/https:ro
  supportconsumer:
    image: support-consumer
    depends_on:
      - mssql
      - rabbitmq
    build:
      context: ./
      dockerfile: DockerfileConsumer
    ports:
      - "4041:80"
    environment:
      MessageBroker__Username: rabbitsa
      MessageBroker__Password: mypa55w0rd!
      MessageBroker__Hostname: rabbitmq
      MessageBroker__Port: 5672
      ConnectionStrings__BeaverTinderDatabase: Data Source=mssql;Initial Catalog=BeaverTinderDatabase;User=sa;Password=superPuperPassword!15641;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False;MultipleActiveResultSets=true;
    volumes:
      - ~/.aspnet/https:/https:ro
  payment:
    container_name: payment
    image: payment-service
    depends_on:
      - mssql
      - rabbitmq
    build:
      context: ./
      dockerfile: DockerfilePayment
    ports:
      - "8084:80"
    environment:
      ConnectionStrings__BeaverTinderDatabase: Data Source=mssql;Initial Catalog=BeaverTinderDatabase;User=sa;Password=superPuperPassword!15641;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False;MultipleActiveResultSets=true;
    volumes:
      - ~/.aspnet/https:/https:ro   
  subscription:
    image: subscription-service
    container_name: subscription
    depends_on:
      - mssql
      - rabbitmq
    build:
      context: ./
      dockerfile: DockerfileSub
    ports:
      - "8083:80"
    environment:
      ConnectionStrings__BeaverTinderDatabase: Data Source=mssql;Initial Catalog=BeaverTinderDatabase;User=sa;Password=superPuperPassword!15641;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False;MultipleActiveResultSets=true;
    volumes:
      - ~/.aspnet/https:/https:ro
  s3:
    image: s3
    depends_on:
      - mssql
      - rabbitmq
      - minio
    build:
      context: ./
      dockerfile: DockerfileS3
    ports:
      - "4042:80"
    environment:
      MessageBroker__Username: rabbitsa
      MessageBroker__Password: mypa55w0rd!
      MessageBroker__Hostname: rabbitmq
      MessageBroker__Port: 5672
      Minio__User: ozontech
      Minio__Password: minio123
      Minio__AccessKey: F7l1mZ14Pno43XicMUHY
      Minio__SecretKey: Aaz371CWmcr650RLk6xRJSeG0rPw9CB2okThDlwX
      Minio__Endpoint: minio:9000
      Minio__MainBucketName: main-bucket
      Minio__TemporaryBucketName: temporary-bucket
      Redis__Host: redis
      Redis__Port: 6379
      Mongo__ConnectionString: mongodb://mongo:27017
      Mongo__DatabaseName: Metadata
      Mongo__MetadataCollectionName: Metadata
    volumes:
      - ~/.aspnet/https:/https:ro
  minio:
    image: minio/minio:latest
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ozontech
      MINIO_ROOT_PASSWORD: minio123
    volumes:
      - ~/minio/data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
  redis:
    image: redis:latest
    restart: always
    ports:
      - '6379:6379'
    environment:
      - REDIS_PASSWORD=my-password
      - REDIS_PORT=6379
      - REDIS_DATABASES=16
  mongo:
    hostname: mongo
    image: mongo:latest
    ports:
      - '27017:27017'
    volumes:
      - ./mongo-data:/data/db
  react:
    image: front
    build:
      context: /front
      dockerfile: DockerFile
    ports:
      - "3000:3000"